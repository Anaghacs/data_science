Overview of google colaboratory
*******************************

What is Google Colab?
----------------------
Google Colab was developed by Google to provide free access to GPU’s and TPU’s to anyone who needs them to build a machine learning or deep learning model. 
Colaboratory, or “Colab” for short, is a product from Google Research.
Google Colab can be defined as an improved version of Jupyter Notebook.
Colab allows anybody to write and execute arbitrary python code through the browser, and is especially well suited to machine learning, data analysis and education. More technically, Colab is a hosted Jupyter notebook service that requires no setup to use, while providing access free of charge to computing resources including GPUs.
Colab is free of charge to use.
Google Colaboratory is a freemium tool offered by Google Research that allows users to write and execute Python code in their web browsers. 
Colab is actually based on the Jupyter open source, and essentially allows you to create and share computation files without having to download or install anything.

Google Colab Features or Advantages of google colab
----------------------------------------------------
* Interactive tutorials to learn machine learning and neural networks.
* Write and execute Python 3 code without having a local setup.
* Execute terminal commands from the Notebook.
* Import datasets from external sources such as Kaggle.
* Save your Notebooks to Google Drive.
* Import Notebooks from Google Drive.
* Free cloud service, GPUs and TPUs.
* Integrate with PyTorch, Tensor Flow, Open CV.
* Import or publish directly from/to GitHub.

Disadvantages or limitations of google colab
--------------------------------------------
* file hosting, media serving, or other web service offerings not related to interactive compute with Colab
* downloading torrents or engaging in peer-to-peer file-sharing
* using a remote desktop or SSH
* connecting to remote proxies
* mining cryptocurrency
* running denial-of-service attacks
* password cracking
* using multiple accounts to work around access or resource usage restrictions
* creating deepfakes

what is jupyter note book?
-------------------------
Jupyter is a free, open-source, web-based interactive computing platform that was spun off of IPython.
Jupyter Notebook is a web application that allows users to create and share computation documents with each other.

Fundementals of python
-----------------------
1. Data types (int, float, strings)
2. Compound data structures (lists, tuples, and dictionaries)
3. Conditionals, loops, and functions
4. Object-oriented programming and using external libraries

1. Data Types and Structures
  --------------------------
The very first step is to understand how Python interprets data.

Starting with widely used data types, you should be familiar with integers (int), floats (float), strings (str), and booleans (bool). Here's what you should practice.

Type, typecasting, and I/O functions:
Learning the type of data using the type() method.

Strings:
Knowing how to deal with textual data and their operators comes in handy when dealing with the string data type. Practice these concepts:

Concatenating strings using +
Splitting and joining the string using the split() and join()method
Changing the case of the string using lower() and upper() methods
Working with substrings of a string.

2. Compound data structures (lists, tuples, and dictionaries)
    --------------------------------------------------------
 *** Lists (compound data types):
    -----------------------------------
One of the most commonly used and important data structures in Python are lists. A list is a collection of elements, and the collection can be of the same or varied data types.

Here are the concepts you should be familiar with:

* How multiple data types can be stored in a Python list.
* Indexing and slicing to access a specific element or sub-list of the list.
* Helper methods for sorting, reversing, deleting elements, copying, and appending.
* Nested lists — lists containing lists. For example, [1,2,3, [10,11]].
* Addition in a list.

 *** Tuple compound data type
-----
Tuples are an immutable ordered sequence of items. They are similar to lists, but the key difference is that tuples are immutable whereas lists are mutable.

Concepts to focus on:

* Indexing and slicing (similar to lists).
* Nested tuples.
* Adding tuples and helper methods like count() and index().

 *** Dictionaries for compound data structure
   ------------------------------------------
These are another type of collection in Python. While lists are integer indexed, dictionaries are more like addresses. Dictionaries have key-value pairs, and keys are analogous to indexes in lists.

Concepts to focus on:

* Iterating through a dictionary (also covered in loops).
* Using helper methods like get(), pop(), items(), keys(), update(), and so on.

3. Conditionals, Loops, and Functions
-----------------------------------

Conditions and Branching
------------------------
Python uses these boolean variables to assess conditions. Whenever there is a comparison or evaluation, boolean values are the resulting solution.

Boolean operators (or, and, not)
--------------------------------
These are used to evaluate complex assertions together.

* or — One of the many comparisons should be true for the entire condition to be true.
* and — All of the comparisons should be true for the entire condition to be true.
* not — Checks for the opposite of the comparison specified.

Loops
-----
Often you'll need to do a repetitive task, and loops will be your best friend to eliminate the overhead of code redundancy. You’ll often need to iterate through each element of a list or dictionary, and loops come in handy for that. while and for are two types of loops.

Focus on:

* The range() function and iterating through a sequence using for loops.
* while loops
* Iterating through lists and appending (or any other task with list items) elements in a particular order.
* Using break, pass, and continue keywords.

Functions
---------
While working on a big project, maintaining code becomes a real chore. If your code performs similar tasks many times, a convenient way to manage your code is by using functions.

A function is a block of code that performs some operations on input data and gives you the desired output.
We define a function using the def keyword followed by the name of the function and arguments (input) within the parentheses, followed by a colon.

The body of the function is the indented code block, and the output is returned with the return keyword.
Using functions makes the code more readable, reduces redundancy, makes the code reusable, and saves time.

4. Object-Oriented programming and using external libraries
------------------------------------------------------------

We have been using the helper methods for lists, dictionaries, and other data types, but where are these coming from?

When we say list or dict, we are actually interacting with a list class object or a dict class object. Printing the type of a dictionary object will show you that it is a class dict object.

These are all pre-defined classes in the Python language, and they make our tasks very easy and convenient.

Objects are instance of a class and are defined as an encapsulation of variables (data) and functions into a single entity. They have access to the variables (attributes) and methods (functions) from classes.

Using External Libraries/Modules
-------------------------------
One of the main reasons to use Python for data science is the amazing community that develops high-quality packages for different domains and problems. Using external libraries and modules is an integral part of working on projects in Python.

These libraries and modules have defined classes, attributes, and methods that we can use to accomplish our tasks. For example, the math library contains many mathematical functions that we can use to carry out our calculations. The libraries are .py files.